#include <iostream>
using namespace std;

int main(){
	int a = 5; 
	char b = 'A';
	char &c = b;
	int *x = &a;
	char *y = &b;
	int **z = &x;

	cout << a << " " << b << " " << c << " " << x << " " << (void*)y << " " << z << endl;
	cout << &a << " " << (void*)&b << " " << (void*)&c << " " << &x << " " << &y << " " << &z << endl;
	c = 'F';
	cout << a << " " << b << " " << c << " " << x << " " << (void*)y << " " << z << endl;
	*y = 'W';
	cout << a << " " << b << " " << c << " " << x << " " << (void*)y << " " << z << endl;
	*x = 6;
	cout << a << " " << b << " " << c << " " << x << " " << (void*)y << " " << z << endl;
	**z = 7;
	cout << a << " " << b << " " << c << " " << x << " " << (void*)y << " " << z << endl;


	return 0;
}
	/* 	
		จากค่า int char ที่ประกาศ
		a คือ 5
		b คือ A
		&c ตรง & คือตำแหน่ง &c = b หมายถึง ตำแหน่งc // แต่ถ้า c เฉยๆๆๆเลย ก็คือ c= b ที่b คือ 'A' จะได้ว่า c = 'A'
		*x * คือ ชี้ไปที่อยู่ มันชี้ไป &a แปลว่า ที่ตำแหน่งของ a เก็บอะไรไว้ ก็แสดงอันนั้นออกมา 
			ถ้า cout << x เฉยๆ มันจะแสดงตำแหน่งของ a เพราะ เดิมๆคือ *x = &a ตรง a มี& บอกตำแหน่ง  
			แต่เรา cout << x แค่ x มันเลยเป็น x = &a

		(void*) ก็เหมือน *  เพียงแต่ค่าที่ประกาศ ไม่จำเป็นต้องเป็นค่าประเภทเดียวกัน int กับ double ก็ได้ มันฟิกให้เป็นค่า 
		**z ตรง ** เป็น pointer ที่ ชี้ไปยัง pointer อีกที // ชี้ไปตรงนี้ก่อน ละไปต่ออีกจุด อารมณ์แบบนี้
	
		จะได้ว่า
		cout << a << " " << b << " " << c << " " << x << " " << (void*)y << " " << z << endl;
		a--> 5 เพราะ a คือ 5  b-->A เพราะ b = 'A' c--> A เพราะ แค่ c ไม่ใช่ &c เลยไม่แสดงตำแหน่งจัดเก็บ		
		x--> ตำแหน่งของ a เพราะ *x = &a แต่เราเอาแค่ x มาcout เลยเป็น x = &a ตำแหน่งของ a 
		y--> ตำแหน่งของ y  เพราะ เรา cout << y คือ จาก *y = &b จะได้ y = &b ส่วน void เอามาเพื่อฟิกค่าไม่ให้ char y เอาไปแปลงเป็นข้อความ
		z--> ตำแหน่งของ a เพราะ **z ชี้ไปที่ &x ตำแหน่งของ x เป็น pointer ที่ชี้ไปที่ ตำแหน่งของ a (อารมณ์point 2 ชั้น มั้ง)


		บรรทัดต่อๆไปก็คล้ายๆกันเลย หลักการเดียวกัน
		cout << &a << " " << (void*)&b << " " << (void*)&c << " " << &x << " " << &y << " " << &z << endl;
		
		c = 'F'; ตรงนี้กำหนดค่าใหม่ ตรง c คือ &c = b cเฉยๆคือ c= b b = 'A' แปลว่าตรง A จะเป็น F
		
		cout << a << " " << b << " " << c << " " << x << " " << (void*)y << " " << z << endl;
		
		*y = 'W'; ตรงก็เหมือนกัน *y = &b  แปลว่า มันชี้ไปที่ตำแหน่งที่ b เก็บไว้คืออะไร แล้วเปลี่ยนมันเป็น W 
											ซึ่งตรงตำแหน่งของ b ที่ b เก็บไว้ b = 'F'  จาก ข้างบนตะกี้ แปลว่าตรง F จะเป็น W
		
		cout << a << " " << b << " " << c << " " << x << " " << (void*)y << " " << z << endl;
		
		*x = 6; เหมือนกัน *x = &a มัันไปชี้ที่ตำแหน่งที่ a เก็บไว้ a เดิมๆที่เก็บไว้คือ 5 ก็จะเป็น 6
		
		cout << a << " " << b << " " << c << " " << x << " " << (void*)y << " " << z << endl;
		
		**z = 7; เหมือนกันเลย **z = &x // *x = &a 
		
		cout << a << " " << b << " " << c << " " << x << " " << (void*)y << " " << z << endl;


	*/
